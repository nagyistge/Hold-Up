/***************************************************************************** * Copyright (c) 1999-2002, Pierre-Olivier Latour * http://www.pol-online.net * info@pol-online.net * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA. *****************************************************************************/#ifndef __WINDOW_SERVER__#define __WINDOW_SERVER__#ifndef __PREFERENCES__#include "Preferences.h"#endif#ifndef __SKIN__#include "Skin.h"#endif#ifndef __ACCOUNT__#include "Account.h"#endif//Constants#define				kMaxSelectedLines				1024enum {	kFocus_None = 0,	kFocus_AccountList,	kFocus_OperationList,	kFocus_Filter,	kNumFocus};enum {	kTextAlign_Left = 0,	kTextAlign_Middle,	kTextAlign_Right};enum {	kList_Accounts = 0,	kList_Operations,	kNumLists};//Structurestypedef struct {	long				num;	ListDefinitionPtr	definition;	long				columnCount;	ColumnInfoPtr		columnList;	ID*					selectedColumn;		Rect				bounds;	long				numLines,						numVisibleLines,						firstLine;	Boolean				hasScrollbar;		long				numSelectedLines,						maxSelectedLines;	long				selectedNumList[kMaxSelectedLines];	ID					selectedIDList[kMaxSelectedLines];		Boolean				active;} ListInfo;typedef ListInfo* ListInfoPtr;struct OperationSelection {	long				count;	AccountPtr			owner[kMaxSelectedLines];	ID					id[kMaxSelectedLines];	OperationPtr		operation[kMaxSelectedLines];};typedef OperationSelection* OperationSelectionPtr;//Classesclass WindowServer{private:	SkinDefinitionHandle	_skinDef;	SkinImagesHandle		_images;	SkinFontsHandle			_fonts;	SkinListsHandle			_lists;	SkinScrollBarHandle		_scrollBar;	GWorldPtr				_windowPattern,							_windowImage,							_windowAlpha;	Rect					_patternRect;		RgnHandle				_saveClip,							_saveClipPattern;	TEHandle				_filterTE;	Rect					_filterTERect;	GWorldPtr				_windowBuffer;	Boolean					_windowZoomed;	Point					_zoomPosition;	Rect					_zoomWindowContent;	long					_saveFocus;	Boolean					_suspended;	unsigned long			_lastClickTime;	Point					_lastClickWhere;	ThemeCursor				_currentCursor;	OperationPtr			_noteTagOperation;	Point					_noteTagPosition;	unsigned long			_noteTagEnterTime;#if TARGET_API_MAC_CARBON	Boolean					_mouseDown;#endif	unsigned long			_lastLineMoveTime,							_lastKeyTime;	Str31					_keyString;	ListInfo				_listInfo[kNumLists];		OperationPtr			_operationListCache;	long					_operationListCacheSize;	OperationSelection		_operationSelectionCache;	PreferencesDataPtr		_appPrefs;	public:	WindowPtr				window;	long					userFocus;	private:	void _FillPattern(Rect* destRect, Boolean noClipping = false);	void _DrawSkinImage(long num, Boolean eraseBackground = true, short destH = kUndefinedNum, short destV = kUndefinedNum);	void _DrawImageRepeatH(Point source, Point size, Point dest, short width, Boolean hasAlpha, Boolean eraseBackground = true);	void _DrawImageRepeatV(Point source, Point size, Point dest, short height, Boolean hasAlpha, Boolean eraseBackground = true);	void _DrawText(FontDefinitionPtr font, StringPtr text, short h, short v, short alignement);	void _DrawFilterTE();	void _DrawColumn(ListInfoPtr list, ID column);	void _DrawList(ListInfoPtr list, Boolean drawScrollBar = true, Boolean erasebackground = true);	void _DrawListContentClipped(ListInfoPtr list, Boolean erasebackground = true);	void _DrawNoteTag(StringPtr text, short h, short v, Boolean eraseBackground = false);	void _DrawListFrame(ListInfoPtr list, Boolean eraseBackground = true);	void _DrawListLines(ListInfoPtr list, Boolean eraseBackground = true);	void _DrawColumnHeader(ListInfoPtr list, ID column, Point* imageBackground);	void _DrawListScrollBar(long barMode, ListInfoPtr list, Boolean eraseBackground = true);	void _DrawScrollBarBody(Rect* bounds, long num, long mode, Boolean hasAlpha);	void _DrawScrollBarThumb(Rect* bounds, long num, long mode, Boolean hasAlpha);	void _DrawListHeader(ListInfoPtr list, Point* imageBackground, Boolean eraseBackground = true);	void _DrawDisplay(Boolean eraseBackground = true);		void _GetSkinImageRect(long num, Rect* theRect);	short _GetTitleBarMiddleWidth();	void _GetFilterText(StringPtr text);	void _SetFilterText(StringPtr text);	void _GetListBounds(long num, Rect* bounds);	OperationPtr _GetOperationFromAbsoluteNum(long num);	ColumnInfoPtr _GetColumnFromID(ID id);	short _GetColumnMinimalWidth(ListInfoPtr list, ID columnID);	Boolean _GetOperationListCacheSumString(StringPtr text);	long _GetMagicButtonMode();	void _GetListWithFrameBounds(long num, Boolean active, Rect* bounds);	void _GetListScrollBarBounds(ListInfoPtr list, Rect* bounds);	long _GetListNumVisibleLines(ListInfoPtr list);	void _GetListScrollBarThumbBounds(ListInfoPtr list, Rect* bounds);	long _GetScrollBarValueFromThumb(ListInfoPtr list, short position);	short _WhereClick(Point localMouse);	Boolean _TrackButtonClick(long numUp, long numDown);	void _ResizeWindow(short posH, short posV, short width, short height);	Boolean _CreateFilterTE();	void _InvalidWindow();	void _ValidWindow();	void _SortOperationListCache();	void _ReverseOperationListCache();	void _RefreshOperationListSelection();	short _WhereClickList(ListInfoPtr list, Point mouse, ID* column, long* line);	void _SetFocus(long newFocus, Boolean redraw = true);	void _ResizeColumn(ListInfoPtr list, ID columnID, Point startMouse);	void _MoveColumn(ListInfoPtr list, ID columnID, Point startMouse);	Boolean _TrackListIconClick(ListInfoPtr list, ID column, long line, long numUp, long numDown);	void _HandleAccountListClick(Point mouse, Boolean doubleClick, short modifiers);	void _HandleOperationListClick(Point mouse, Boolean doubleClick, short modifiers);	short _TrackListHeaderClick(ListInfoPtr list, ID column);	void _ScrollListFirstLine(ListInfoPtr list, long targetLine);	void _TrackListScrollBarClick(ListInfoPtr list, Point mouse, short modifiers);	short _WhereClickScrollBar(ListInfoPtr list, Point mouse);	Boolean _TrackListSortingIconClick(ListInfoPtr list);	void _SetOperationListSelection(long line);	void _AppendOperationListSelection(long line, Boolean switchState);	void _ExtendOperationListSelection(long line);public:	void ShowServerWindow();	void HideServerWindow();	void UpdateServerWindow(Boolean isUpdate = false);	Boolean HandleMouseClick(short modifiers);	Boolean HandleKeyDown(char theChar, unsigned char theKey, short modifiers);#if __CARBON_EVENTS__	Boolean HandleMouseWheel(long delta);#endif	void Idle();	void Suspend();	void Resume();	void Copy();	void Paste();	void Cut();	void Duplicate();	Boolean ClipBoardContentValid();		void SetColumnVisibility(ID id, Boolean visible);	Boolean IsColumnVisible(ID id);	void SetAccountListVisibility(Boolean visible);	Boolean IsAccountListVisible();	void ClearFilterText();		long GetTargetNum();	long GetOperationsSelectionSize();	OperationSelectionPtr GetOperationSelection();	OperationPtr GetOperationCacheList();	short GetSkinAboutResID();	void Invalidate(ID targetID = kUndefinedID, long operationCount = 0, ID operationIDList[] = NULL);		WindowServer(PreferencesDataPtr prefs, OSErr* theError);	~WindowServer();};typedef WindowServer* WindowServerPtr;//Macros#define GetTargetNumMax() (application->accountCount + application->filterCount)#define	TargetNumIsFilter(n) (((n) >= application->accountCount) && ((n) < GetTargetNumMax()))#define	TargetNumIsAccount(n) (((n) >= 0) && ((n) < application->accountCount))#define	TargetNumToAccountNum(n) (n)#define	TargetNumToFilterNum(n) ((n) - application->accountCount)#define	AccountNumToTargetNum(n) (n)#define	FilterNumToTargetNum(n) ((n) + application->accountCount)#endif //__WINDOW_SERVER__