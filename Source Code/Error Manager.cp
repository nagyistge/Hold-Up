/***************************************************************************** * Copyright (c) 1999-2002, Pierre-Olivier Latour * http://www.pol-online.net * info@pol-online.net * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA. *****************************************************************************/#include			"Error Manager.h"#include			"Utils.h"//CONSTANTS:#define				kError_TableResType		'text'#define				kError_OKText			1#define				kError_QuitText			2#define				kError_TitleText		3#define				kError_FatalTitleText	4#define				kError_WarningTitleText	5#define				kError_ContinueText		6#define				kError_CancelText		7#define				kError_NoteTitleText	8#define				kInsertionText			'$'#define				kInsertionNumber		'#'#define				kOKButton				1#define				kCancelButton			2//ROUTINES:ErrorManager::ErrorManager(){	_errorTextTable = Get1IndResource(kError_TableResType, 1);	if(_errorTextTable) {		DetachResource(_errorTextTable);		HLock(_errorTextTable);	}	else	PanicError(4);}ErrorManager::~ErrorManager(){	if(_errorTextTable)	DisposeHandle(_errorTextTable);}StringPtr ErrorManager::_GetTableText(long num){	StringPtr			errorText = (StringPtr) *_errorTextTable;	long				count = 0;		--num;	while(count != num) {		errorText += errorText[0] + 1;		++count;	}		return errorText;}void ErrorManager::ExpandString(StringPtr in, StringPtr out, void* param1, void* param2, void* param3, void* param4){	Str31					temp;	StringPtr				insert;	void*					param = param1;	long					i,							j;								out[0] = 0;	for(i = 1; i <= in[0]; ++i) {		if((in[i] == kInsertionText) || (in[i] == kInsertionNumber)) {			if(in[i] == kInsertionNumber) {				NumToString((long) param, temp);				for(j = 1; j <= temp[0]; ++j)				out[++out[0]] = temp[j];			}			else if(param) {				insert = (StringPtr) param;				for(j = 1; j <= insert[0]; ++j)				out[++out[0]] = insert[j];			}			else			out[++out[0]] = in[i];						if(param == param1)			param = param2;			else if(param == param2)			param = param3;			else if(param == param3)			param = param4;			else			param = NULL;		}		else		out[++out[0]] = in[i];	}}void ErrorManager::StandardError(long num, void* param1, void* param2, void* param3, void* param4){	_DisplayError(kAlertStopAlert, _GetTableText(kError_OKText), NULL, _GetTableText(kError_TitleText), _GetTableText(num), param1, param2, param3, param4);}void ErrorManager::FatalError(long num, void* param1, void* param2, void* param3, void* param4){	_DisplayError(kAlertStopAlert, _GetTableText(kError_QuitText), NULL, _GetTableText(kError_FatalTitleText), _GetTableText(num), param1, param2, param3, param4, true);}Boolean ErrorManager::Warning(long num, void* param1, void* param2, void* param3, void* param4){	if(_DisplayError(kAlertCautionAlert, _GetTableText(kError_ContinueText), _GetTableText(kError_CancelText), _GetTableText(kError_WarningTitleText), _GetTableText(num), param1, param2, param3, param4) == kOKButton)	return true;		return false;}void ErrorManager::Note(long num, void* param1, void* param2, void* param3, void* param4){	_DisplayError(kAlertNoteAlert, _GetTableText(kError_OKText), NULL, _GetTableText(kError_NoteTitleText), _GetTableText(num), param1, param2, param3, param4);}short ErrorManager::_DisplayError(short type, Str63 button1, Str63 button2, Str255 title, Str255 message, void* param1, void* param2, void* param3, void* param4, Boolean fatal){	AlertStdAlertParamRec	params;	short					outItemHit = 0;	Str255					out;	Str63					copy1,							copy2;		//Expand message	ExpandString(message, out, param1, param2, param3, param4);		//Work around a bug - default button text must be on stack?	BlockMove(button1, copy1, sizeof(Str63));	if(button2)	BlockMove(button2, copy2, sizeof(Str63));		//Setup dialog params	params.movable = true;	if(fatal)	params.filterProc = nil;	else	params.filterProc = ModalDialogRoutine;	params.helpButton = false;	params.defaultText = copy1;	if(button2)	params.cancelText = copy2;	else	params.cancelText = nil;	params.otherText = nil;	params.defaultButton = kAlertStdAlertOKButton;	if(button2)	params.cancelButton = kAlertStdAlertCancelButton;	else	params.cancelButton = 0;	params.position = kWindowDefaultPosition;		//Display alert	StandardAlert(type, title, out, &params, &outItemHit);		if(fatal) {		if(ModalDialogRoutine)		application->WriteAllToDisk();		ExitToShell();	}		return outItemHit;}