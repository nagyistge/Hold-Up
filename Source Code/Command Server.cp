/***************************************************************************** * Copyright (c) 1999-2002, Pierre-Olivier Latour * http://www.pol-online.net * info@pol-online.net * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA. *****************************************************************************/#include			"Command Server.h"#include			"Window Server.h"#include			"Filter.h"#include			"Print Server.h"//ROUTINES:CommandServer::CommandServer(){	_undoCommand = kCommand_None;	_undoCommandData = NULL;}CommandServer::~CommandServer(){	if(_undoCommandData)	DisposePtr((Ptr) _undoCommandData);}Command CommandServer::GetFromMenu(long result){	short			theItem = LoWord(result),					theMenu = HiWord(result);	OSType			command = kCommand_None;	#if !TARGET_API_MAC_CARBON	Str255			theString;		if((theMenu == MenuNumToID(kAppleMenu)) && (theItem > 2)) {		GetMenuItemText(GetMenuHandle(MenuNumToID(kAppleMenu)), theItem, theString);		OpenDeskAcc(theString);		return kCommand_None;	}#endif		if(theMenu && (GetMenuItemCommandID(GetMenuHandle(theMenu), theItem, &command) == noErr))	return command;		return kCommand_None;}OSErr CommandServer::Execute(Command command, void* param1, void* param2, void* param3, void* param4){	OperationSelectionPtr	selection = application->windowServer->GetOperationSelection();	long					targetNum = application->windowServer->GetTargetNum(),							i;	ID						targetID;	OSErr					theError = noErr;		//Process command	switch(command) {				//**** Undo-able commands *****//				case kCommand_NewOperation:		if(TargetNumIsAccount(targetNum)) {			targetID = application->accountList[TargetNumToAccountNum(targetNum)]->NewOperation();			if(targetID != kUndefinedID) {				if(appPrefs->flags & kPreferencesFlag_AutoSave)				application->WriteAccountToDisk(application->accountList[TargetNumToAccountNum(targetNum)]);				application->windowServer->Invalidate(kUndefinedID, 1, &targetID);			}		}		else		theError = paramErr;		break;				case kCommand_EditOperation:		if((targetNum != kUndefinedNum) && selection) {			if(selection->count == 1) {				if(selection->operation[0]->owner->EditOperation(selection->operation[0])) {					if(appPrefs->flags & kPreferencesFlag_AutoSave)					application->WriteAccountToDisk(selection->operation[0]->owner);					application->windowServer->Invalidate();				}			}#if !__BASIC__			else {				if(application->EditMultipleOperations(selection)) {					if(appPrefs->flags & kPreferencesFlag_AutoSave) {						for(i = 0; i < application->accountCount; ++i)						application->WriteAccountToDisk(application->accountList[i]);					}					application->windowServer->Invalidate();				}			}#endif		}		else		theError = paramErr;		break;				case kCommand_DeleteOperation:		if((targetNum != kUndefinedNum) && selection) {			//Request user confirmation			if(!(appPrefs->flags & kPreferencesFlag_DeleteConfirmation) || application->errorManager->Warning(43, (void*) selection->count)) {				for(i = 0; i < selection->count; ++i)				selection->owner[i]->DeleteOperation(selection->id[i]);				application->windowServer->Invalidate();				if(appPrefs->flags & kPreferencesFlag_AutoSave) {					for(i = 0; i < application->accountCount; ++i)					application->WriteAccountToDisk(application->accountList[i]);				}			}		}		else		theError = paramErr;		break;				case kCommand_Cut:		application->windowServer->Cut();		break;				case kCommand_Copy:		application->windowServer->Copy();		break;				case kCommand_Paste:		application->windowServer->Paste();		break;				case kCommand_Duplicate:		application->windowServer->Duplicate();		break;				//**** Non-undo-able commands *****//				case kCommand_DisplayAccountList:		application->windowServer->SetAccountListVisibility(!application->windowServer->IsAccountListVisible());		break;				case kCommand_DisplayCategory:		application->windowServer->SetColumnVisibility(kOperationColumn_Category, !application->windowServer->IsColumnVisible(kOperationColumn_Category));		break;				case kCommand_DisplayPaymentType:		application->windowServer->SetColumnVisibility(kOperationColumn_PaymentType, !application->windowServer->IsColumnVisible(kOperationColumn_PaymentType));		break;				case kCommand_DisplayCustom:		application->windowServer->SetColumnVisibility(kOperationColumn_Custom, !application->windowServer->IsColumnVisible(kOperationColumn_Custom));		break;				case kCommand_DisplaySpecial:		if(TargetNumIsFilter(targetNum))		application->windowServer->SetColumnVisibility(kOperationColumn_Account, !application->windowServer->IsColumnVisible(kOperationColumn_Account));		else		application->windowServer->SetColumnVisibility(kOperationColumn_Balance, !application->windowServer->IsColumnVisible(kOperationColumn_Balance));		break;				case kCommand_Quit:		if(!application->WriteAllToDisk() && !application->errorManager->Warning(47))		break;#if __CARBON_EVENTS__		QuitApplicationEventLoop();#else		application->run = false;#endif				break;		#if !__DEMO__				case kCommand_DeleteTarget:		if(TargetNumIsAccount(targetNum)) {			if(application->DeleteAccount(TargetNumToAccountNum(targetNum)))			application->windowServer->Invalidate();		}		else if(TargetNumIsFilter(targetNum)) {			if(application->DeleteFilter(TargetNumToFilterNum(targetNum)))			application->windowServer->Invalidate();		}		else		theError = paramErr;		break;		case kCommand_NewAccount:		application->NewAccountFromUser();		break;				case kCommand_NewFilter:		application->NewFilterFromUser();		break;		#endif				case kCommand_ImportOperations:		theError = application->ImportOperations();		if(theError == userCanceledErr)		theError = noErr;		break;		#if !__BASIC__		case kCommand_ExportOperations:		theError = application->ExportOperations();		if(theError == userCanceledErr)		theError = noErr;		break;#endif				case kCommand_EditPreferences:		if(application->prefs->Edit()) {			application->WriteAllToDisk();			application->windowServer->Invalidate();		}		break;				case kCommand_EditAccountInfo:		if(TargetNumIsAccount(targetNum)) {			targetID = application->accountList[TargetNumToAccountNum(targetNum)]->data->id;			if(application->accountList[TargetNumToAccountNum(targetNum)]->EditInfo()) {				if(appPrefs->flags & kPreferencesFlag_AutoSave)				application->WriteAccountToDisk(application->accountList[TargetNumToAccountNum(targetNum)]);				application->SortAccountsAlphabetically();				application->windowServer->Invalidate(targetID);			}		}		else if(TargetNumIsFilter(targetNum)) {			targetID = application->filterList[TargetNumToFilterNum(targetNum)]->data->id;			if(application->filterList[TargetNumToFilterNum(targetNum)]->EditInfo()) {				if(appPrefs->flags & kPreferencesFlag_AutoSave)				application->WriteFilterToDisk(application->filterList[TargetNumToFilterNum(targetNum)]);				application->SortFiltersAlphabetically();				application->windowServer->Invalidate(targetID);			}		}		else		theError = paramErr;		break;				case kCommand_EditAccountPassword:		if(TargetNumIsAccount(targetNum)) {			if(application->accountList[TargetNumToAccountNum(targetNum)]->EditPassword()) {				if(appPrefs->flags & kPreferencesFlag_AutoSave)				application->WriteAccountToDisk(application->accountList[TargetNumToAccountNum(targetNum)]);			}		}		else		theError = paramErr;		break;		#if !__BASIC__		case kCommand_EditAutomatics:		if(TargetNumIsAccount(targetNum)) {			if(application->accountList[TargetNumToAccountNum(targetNum)]->EditAutomaticList()) {				application->accountList[TargetNumToAccountNum(targetNum)]->ExecuteAutomatics();				if(appPrefs->flags & kPreferencesFlag_AutoSave)				application->WriteAccountToDisk(application->accountList[TargetNumToAccountNum(targetNum)]);			}		}		else		theError = paramErr;		break;#endif				case kCommand_DisplayAbout:		application->ShowAbout(kAboutDialogID);		break;				case kCommand_DisplayAboutSkin:		application->ShowAbout(application->windowServer->GetSkinAboutResID());		break;				case kCommand_PageSetup:		if(application->printServer->active) {			theError = application->printServer->PageSetup();			if(theError == userCanceledErr)			theError = noErr;		}		else		application->errorManager->StandardError(54);		break;				case kCommand_Print:		if(application->printServer->active) {			if(application->windowServer->GetOperationCacheList()) {				theError = application->printServer->PrintOperationList(application->windowServer->GetOperationCacheList());				if((theError == kDTPAbortJobErr) || (theError == userCanceledErr))				theError = noErr;			}			else			application->errorManager->StandardError(21);		}		else		application->errorManager->StandardError(54);		break;				case kCommand_UpdateServerWindow:		application->windowServer->UpdateServerWindow(true);		break;				case kCommand_ClickWindow:		if(!application->windowServer->HandleMouseClick((short) param1))		theError = paramErr;		break;				case kCommand_KeyWindow:		if(!application->windowServer->HandleKeyDown((char) param1, (unsigned char) param2, (short) param3))		theError = paramErr;		break;		#if __CARBON_EVENTS__		case kCommand_ScrollWindow:		if(!application->windowServer->HandleMouseWheel((long) param1))		theError = paramErr;		break;#endif		#if !__CARBON_EVENTS__		case kCommand_ApplicationSuspend:		application->windowServer->Suspend();		break;				case kCommand_ApplicationResume:		application->windowServer->Resume();		break;#endif				//**** Unsupported commands *****//				case kCommand_None:				break;				default:		theError = paramErr;		break;			}		//Synchronize menus	application->SynchronizeMenus();		return theError;}