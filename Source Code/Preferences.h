/***************************************************************************** * Copyright (c) 1999-2002, Pierre-Olivier Latour * http://www.pol-online.net * info@pol-online.net * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA. *****************************************************************************/#ifndef __PREFERENCES__#define __PREFERENCES__#ifndef __APPLICATION__#include "Application.h"#endif#ifndef __ERROR_MANAGER__#include "Error Manager.h"#endif//Constants#define		kPreferences_FileType					'pref'#define		kPreferences_FileCreator				kApplication_Creator#define		kPreferences_Version					0x0122#define		kPreferencesFlag_DeleteConfirmation		(1 << 0)#define		kPreferencesFlag_AutoSave				(1 << 1)#define		kPreferencesFlag_DisplayNoteTags		(1 << 2)#define		kPreferencesFlag_DisplayCategoryColor	(1 << 3)#define		kPreferencesFlag_FilterNotes			(1 << 4)#define		kPreferencesFlag_DetailedSum			(1 << 5)#define		kPreferencesFlag_SecureOperationCheck	(1 << 6)#define		kPreferencesFlag_LongDates				(1 << 8)#define		kPreferencesFlag_IncomesInBold			(1 << 9)#define		kPreferencesFlag_DisplayCurrencySymbol	(1 << 10)#define		kPreferencesFlag_CustomAccountFolder		(1 << 16)#define		kPreferencesFlag_HasClassicPrintSettings	(1 << 17)#define		kPreferencesFlag_HasCarbonPrintSettings		(1 << 18)#define		kWindowFlag_AccountList					(1 << 0)#define		kWindowFlag_SortIncreasing				(1 << 1)enum {	kAccountColumn_Icon = 1,	kAccountColumn_Name,		kOperationColumn_Description,	kOperationColumn_Category,	kOperationColumn_PaymentType,	kOperationColumn_Amount,	kOperationColumn_Date,	kOperationColumn_Custom,	kOperationColumn_Checked,	kOperationColumn_Warning,	kOperationColumn_Balance,	kOperationColumn_Note,	kOperationColumn_Income,	kOperationColumn_Expense,	kOperationColumn_Account};#define				kAccountNumColumns				2#define				kOperationNumColumns			13#define				kColumnFlag_Visible				(1 << 0)#define				kColumnFlag_Resizable			(1 << 1)#define				kColumnFlag_Movable				(1 << 2)#define				kColumnFlag_Sortable			(1 << 3)#define				kColumnFlag_HasSeparator		(1 << 4)#define				kColumnFlag_Adjustable			(1 << 5)#define				kColumnFlag_Printed				(1 << 14)#define				kColumnFlag_Displayed			(1 << 15)enum {	kBalanceType_Current = 0,	kBalanceType_Future,	kBalanceType_Reconciled};enum {	kImportMode_PayeeIsDescription = 0,	kImportMode_MemoIsDescription,	kImportMode_PayeeMemoIsDescription};//Structurestypedef struct {	ID				id;	unsigned short	flags;	short			textAlignement;	short			width,					printWidth;		char			unused[256];} ColumnInfo;typedef ColumnInfo* ColumnInfoPtr;typedef struct {	unsigned short	version;	unsigned long	flags;		Str31			serialNumber;	FSSpec			accountFolder;	short			skinResID;	PaymentListPtr	payments;	CategoryListPtr	categories;	MacroListPtr	macros;		ColumnInfo		accountsColumns[kAccountNumColumns];	char			unused1[512];	ColumnInfo		operationsColumns[kOperationNumColumns];	char			unused2[512];		unsigned short	windowFlags;	Rect			windowContent;	Point			windowPosition;	short			windowBalanceType;	ID				windowSortingColumn;		Str255			printFontName;	short			printFontSize;		Mesure			marginLeft, //in inches!					marginRight,					marginTop,					marginBottom;		Boolean			importTabText_monthBefore;	unsigned char	importTabText_decimalChar;	long			importTabText_startLine,					importTabText_dateIndex,					importTabText_descriptionIndex,					importTabText_incomeIndex,					importTabText_expenseIndex,					importTabText_customIndex,					importTabText_categoryIndex,					importTabText_paymentIndex;		Boolean			importQIF_monthBefore;	short			importQIF_mode;		unsigned char	unused3[456];} PreferencesData;typedef PreferencesData* PreferencesDataPtr;//Classesclass Preferences{public:	PreferencesDataPtr	data;	private:	ListHandle			_theList;	Cell				_currentCell;	short				_skinMenuItem;	private:	PreferencesDataPtr _CreateDefaultPrefs();	OSErr _ReadFromDisk(Handle* printSettings, Boolean* isTHPrint);	void _ReleasePrefsMemory(PreferencesDataPtr prefs);		void _ShowPane_General(DialogPtr dialog, short offset);	void _ClickPane_General(DialogPtr dialog, short itemHit, short offset);	void _HidePane_General(DialogPtr dialog, short offset);	void _ShowPane_Payments(DialogPtr dialog, short offset);	void _ClickPane_Payments(DialogPtr dialog, short itemHit, short offset);	void _HidePane_Payments(DialogPtr dialog, short offset);	void _ShowPane_Categories(DialogPtr dialog, short offset);	void _ClickPane_Categories(DialogPtr dialog, short itemHit, short offset);	void _HidePane_Categories(DialogPtr dialog, short offset);	void _ShowPane_Operations(DialogPtr dialog, short offset);	void _ClickPane_Operations(DialogPtr dialog, short itemHit, short offset);	void _HidePane_Operations(DialogPtr dialog, short offset);	void _ShowPane_Macros(DialogPtr dialog, short offset);	void _ClickPane_Macros(DialogPtr dialog, short itemHit, short offset);	void _HidePane_Macros(DialogPtr dialog, short offset);	public:	Boolean Edit();	OSErr WriteToDisk(Handle printSettings);		Preferences(ErrorManagerPtr errorManager, Handle* printSettings, Boolean* isTHPrint);	~Preferences();};typedef Preferences* PreferencesPtr;#endif //__PREFERENCES__