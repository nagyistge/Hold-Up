/***************************************************************************** * Copyright (c) 1999-2002, Pierre-Olivier Latour * http://www.pol-online.net * info@pol-online.net * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA. *****************************************************************************/#ifndef __ACCOUNT__#define __ACCOUNT__#ifndef __APPLICATION__#include "Application.h"#endif//Constants#define		kAccount_Version					0x0101#define		kAccount_FileType					'Acnt'#define		kAccount_FileCreator				kApplication_Creator#define		kOperationListResType				'OpLs'#define		kAccount_BankNumContacts			2#define		kOperationFlag_Expense				(1 << 0)#define		kOperationFlag_Checked				(1 << 1)#define		kOperationFlag_Warning				(1 << 2)#define		kAutomaticFlag_Active				(1 << 16)#define		kAutomaticFlag_Trash				(1 << 17)#define		kAccountFlag_NoCents				(1 << 0)#define		kAccountFlag_SymbolLeads			(1 << 1)#define		kCurrency_SymbolMaxChars			3#if __DEMO__#define		kAccount_MaxOperations				64#endifenum {	kAutomatic_Repetition_Daily = 1,	kAutomatic_Repetition_Weekly,	kAutomatic_Repetition_Monthly};enum {	kAutomatic_End_ByDate = 1,	kAutomatic_End_ByNumber};//Structurestypedef struct Operation Operation;typedef Operation* OperationPtr;typedef struct Account Account;typedef Account* AccountPtr;typedef struct {	Str255			name,					firstName;	Str255			address;	Str31			zipCode;	Str255			city;	Str63			state,					country;	Str31			phone,					fax;	Str63			email;} UserInfo;typedef UserInfo* UserInfoPtr;typedef struct {	Str255			name,					title;	Str31			phone,					fax;	Str63			email;} ContactInfo;typedef ContactInfo* ContactInfoPtr;typedef struct {	Str63			accountNumber;	Str63			name;	Str31			clearing;	Str255			address;	Str31			zipCode;	Str255			city;	Str63			state,					country;	Str63			webSite;		ContactInfo		contactList[kAccount_BankNumContacts];} BankInfo;typedef BankInfo* BankInfoPtr;struct Operation {	ID				parent;	unsigned long	flags;	Str63			description;	ID				category,					paymentType;	Amount			amount;	Date			date;	Str63			customData; //check ID, CB ID...	Str255			note;	ID				attachment;	ID				id;		OperationPtr	prev,					next;	AccountPtr		owner;	long			categoryNum,					paymentTypeNum;		Date			lastEditDate;		Amount			balance,					absoluteAmount;						unsigned char	unused[232];};typedef struct {	long			count;	long			bufferCount;	Operation		list[];} OperationList;typedef OperationList* OperationListPtr;typedef struct {	unsigned long	flags;	Date			nextDate;	short			repetitionType,					endType;	long			repetitionValue;	Date			endDate;	long			numRepetitions;	long			creationPreDelay;		Operation		operationTemplate;		short			monthlyRepetitionDay;		unsigned char	unused[254];} Automatic;typedef Automatic* AutomaticPtr;typedef struct {	long			count;	Automatic		list[];} AutomaticList;typedef AutomaticList* AutomaticListPtr;typedef struct {	unsigned long	flags;	Str255			name;	Str63			currencyName;	unsigned char	currencySymbol[kCurrency_SymbolMaxChars + 1];	Str255			note;	UserInfo		user;	BankInfo		bank;		ID				id;		unsigned char	unused2[12];		OperationListPtr	operations;	AutomaticListPtr	automatics;		Str31			password;	Date			saveDate;	Amount			unusedStartBalance;		unsigned short	version;	Boolean			operationListSorted;	long			firstLine;		Str63			lastCustomData;		unsigned char	unused[400];} AccountData;typedef AccountData* AccountDataPtr;//Classesclass Account{public:	AccountDataPtr		data;	private:	FSSpec				_file;	Boolean				_locked;	private:	void _ReleaseAccountMemory();	void _ShowPane_General(DialogPtr dialog, short offset);	void _ClickPane_General(DialogPtr dialog, short itemHit, short offset);	void _HidePane_General(DialogPtr dialog, short offset);	void _ShowPane_User(DialogPtr dialog, short offset);	void _HidePane_User(DialogPtr dialog, short offset);	void _ShowPane_Bank(DialogPtr dialog, short offset);	void _HidePane_Bank(DialogPtr dialog, short offset);	void _ShowPane_Contacts(DialogPtr dialog, short offset);	void _HidePane_Contacts(DialogPtr dialog, short offset);	public:	OSErr CreateNew();	OSErr WriteToDisk(FSSpec* folder);	OSErr ReadFromDisk(FSSpec* file);	OSErr RemoveFromDisk();	Boolean EditInfo();	Boolean Unlock();	OperationPtr BuildOperationLinkedList(StringPtr filter = NULL);	Boolean IsLocked();	Amount GetBalance(short balanceType);	Boolean EditPassword();	Boolean EditAutomaticList();	Boolean EditAutomatic(AutomaticPtr autoAutomatic);	Boolean ExecuteAutomatics();	ID NewOperation();	Boolean EditOperation(OperationPtr operation, Boolean automaticMode = false);	Boolean AddOperation(OperationPtr operation);	Boolean DeleteOperation(ID id);		Account();	~Account();};#endif //__ACCOUNT__